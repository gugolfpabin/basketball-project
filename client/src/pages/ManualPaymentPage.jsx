// src/pages/ManualPaymentPage.jsx
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate, Link } from 'react-router-dom';
import axios from 'axios';
import { ArrowLeft } from 'lucide-react';

function CountdownTimer({ expiryTime, onExpire }) {
    const calculateTimeLeft = () => {
        const difference = +new Date(expiryTime) - +new Date();
        let timeLeft = null;

        if (difference > 0) {
            timeLeft = {
                minutes: Math.floor((difference / 1000 / 60) % 60),
                seconds: Math.floor((difference / 1000) % 60),
            };
        }
        return timeLeft;
    };

    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

    useEffect(() => {
        const timer = setTimeout(() => {
            const newTimeLeft = calculateTimeLeft();
            if (!newTimeLeft) {
                onExpire();
            }
            setTimeLeft(newTimeLeft);
        }, 1000);

        return () => clearTimeout(timer);
    }); 


    return (
        <div className="text-red-500 font-bold text-2xl">
            {timeLeft ? (
                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
                <span>
                    ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô: {String(timeLeft.minutes).padStart(2, '0')}:{String(timeLeft.seconds).padStart(2, '0')}
                </span>
            ) : (
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
                <span>QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß</span>
            )}
        </div>
    );
}


export default function ManualPaymentPage() {
    const location = useLocation();
    const navigate = useNavigate();
    const [isExpired, setIsExpired] = useState(false);
    const { qrCodeImage, orderId, totalAmount, expiresAt } = location.state || {};
    const [selectedFile, setSelectedFile] = useState(null);
    const [uploadMessage, setUploadMessage] = useState('');
    const [isUploading, setIsUploading] = useState(false);

    const apiBase = 'http://localhost:5000/api';

    const handleFileChange = (event) => {
        setSelectedFile(event.target.files[0]);
    };

    const handleSlipSubmit = async () => {
    try {
        setIsUploading(true);
        setUploadMessage('');
        const token = localStorage.getItem('token');

        const formData = new FormData();
        formData.append('slipImage', selectedFile);

        console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server...");
        
        const response = await axios.post(
            `${apiBase}/orders/upload-slip/${orderId}`,
            formData,
            {
                headers: {
                    'Content-Type': 'multipart/form-data',
                    'Authorization': `Bearer ${token}`
                }
            }
        );
        
        console.log("üéâ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Server:", response.data);
        setUploadMessage(response.data.message);
        alert('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        setTimeout(() => {
            navigate('/cart'); 
        }, 1000);

    } catch (err) {
        console.error("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô 'catch' block:", err);
        const errorMsg = err.response?.data?.message || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        setUploadMessage(errorMsg);
    } finally {
        setIsUploading(false);
    }
};

const handleCancelOrder = async () => {
    if (!window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        return;
    }

    try {
        const token = localStorage.getItem('token');
        await axios.post(
            `${apiBase}/orders/delete-pending/${orderId}`, 
            {}, 
            {
                headers: { 'Authorization': `Bearer ${token}` }
            }
        );
        alert('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        navigate('/cart');

    } catch (err) {
        const errorMsg = err.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
        alert(errorMsg);
    }
};

    useEffect(() => {
        if (!qrCodeImage) {
            navigate('/cart'); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        }
    }, [qrCodeImage, navigate]);

    return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° 'relative' ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ */}
        <div className="bg-white p-6 sm:p-8 rounded-lg shadow-lg text-center w-full max-w-md relative">

            {/* --- ‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà (‡∏ß‡∏¥‡∏ò‡∏µ Flexbox 3 ‡∏ä‡πà‡∏≠‡∏á) --- */}
            <div className="flex items-center justify-between mb-4">
                {/* ‡∏ä‡πà‡∏≠‡∏á‡∏ã‡πâ‡∏≤‡∏¢: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£ */}
                <div className="w-1/5 text-left">
                    {!isExpired && (
                        <button
                            onClick={handleCancelOrder}
                            className="text-gray-400 hover:text-gray-600"
                            title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"
                        >
                            <ArrowLeft size={24} />
                        </button>
                    )}
                </div>

                {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á */}
                <div className="w-3/5">
                    <h1 className="text-xl sm:text-2xl font-bold">
                        ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô QR Code
                    </h1>
                </div>

                {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡∏ß‡∏≤: ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• */}
                <div className="w-1/5"></div>
            </div>
            {/* --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á --- */}

            {/* (‡∏•‡∏ö h1 ‡πÅ‡∏•‡∏∞ button ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å) */}
            
            <p className="text-gray-600 mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: <span className="font-bold text-blue-600">{orderId}</span></p>

            {qrCodeImage && !isExpired ? (
                <>
                    <img src={qrCodeImage} alt="QR Code" className="mx-auto border-4 border-gray-300 rounded-lg" />
                    <p className="text-2xl sm:text-3xl font-bold my-4">‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞: {Number(totalAmount).toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
                    <div className="mt-4">
                        <CountdownTimer expiryTime={expiresAt} onExpire={() => setIsExpired(true)} />
                    </div>
                    <p className="mt-4 text-sm text-gray-500">
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ** ‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                    </p>
                </>
            ) : (
                <div className="my-10">
                    <h2 className="text-2xl font-bold text-red-600">QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß</h2>
                    <p className="text-gray-600 mt-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                    <Link to="/cart" className="mt-6 inline-block bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
                        ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                    </Link>
                </div>
            )}
            {!isExpired && (
    <div className="border-t mt-6 pt-6">
        <h2 className="text-lg font-semibold mb-3">‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
        <p className="text-sm text-gray-500 mb-4">
            ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        </p>
        
        <input
            type="file"
            onChange={handleFileChange}
            accept="image/png, image/jpeg, image/gif"
            className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
        />

        <button
            onClick={handleSlipSubmit}
            disabled={isUploading || !selectedFile}
            className="w-full mt-4 bg-green-600 text-white py-2 rounded-md hover:bg-green-700 disabled:bg-gray-400"
        >
            {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}
        </button>   

        {uploadMessage && (
            <p className="mt-3 text-sm font-semibold">{uploadMessage}</p>
        )}
    </div>
)}
        </div>
    </div>
);
}